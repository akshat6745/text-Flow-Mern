{"ast":null,"code":"import _regeneratorRuntime from\"/Users/akshataggarwal/Desktop/mern-chat-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/akshataggarwal/Desktop/mern-chat-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/akshataggarwal/Desktop/mern-chat-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{AddIcon}from\"@chakra-ui/icons\";import{Box,Stack,Text}from\"@chakra-ui/layout\";import{useToast}from\"@chakra-ui/toast\";import axios from\"axios\";import{useEffect,useState}from\"react\";import{getSender}from\"../config/ChatLogics\";import ChatLoading from\"./ChatLoading\";import GroupChatModal from\"./miscellaneous/GroupChatModal\";import{Button}from\"@chakra-ui/react\";import{ChatState}from\"../Context/ChatProvider\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MyChats=function MyChats(_ref){var fetchAgain=_ref.fetchAgain;var _useState=useState(),_useState2=_slicedToArray(_useState,2),loggedUser=_useState2[0],setLoggedUser=_useState2[1];var _ChatState=ChatState(),selectedChat=_ChatState.selectedChat,setSelectedChat=_ChatState.setSelectedChat,user=_ChatState.user,chats=_ChatState.chats,setChats=_ChatState.setChats;var toast=useToast();var fetchChats=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var config,_yield$axios$get,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;config={headers:{Authorization:\"Bearer \".concat(user.token)}};_context.next=4;return axios.get(\"/api/chat\",config);case 4:_yield$axios$get=_context.sent;data=_yield$axios$get.data;setChats(data);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);toast({title:\"Error Occured!\",description:\"Failed to Load the chats\",status:\"error\",duration:5000,isClosable:true,position:\"bottom-left\"});case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function fetchChats(){return _ref2.apply(this,arguments);};}();useEffect(function(){setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));fetchChats();// eslint-disable-next-line\n},[fetchAgain]);return/*#__PURE__*/_jsxs(Box,{d:{base:selectedChat?\"none\":\"flex\",md:\"flex\"},flexDir:\"column\",alignItems:\"center\",p:3,bg:\"white\",w:{base:\"100%\",md:\"31%\"},borderRadius:\"lg\",borderWidth:\"1px\",children:[/*#__PURE__*/_jsxs(Box,{pb:3,px:3,fontSize:{base:\"28px\",md:\"30px\"},fontFamily:\"Work sans\",d:\"flex\",w:\"100%\",justifyContent:\"space-between\",alignItems:\"center\",children:[\"My Chats\",/*#__PURE__*/_jsx(GroupChatModal,{children:/*#__PURE__*/_jsx(Button,{d:\"flex\",fontSize:{base:\"17px\",md:\"10px\",lg:\"17px\"},rightIcon:/*#__PURE__*/_jsx(AddIcon,{}),children:\"New Group Chat\"})})]}),/*#__PURE__*/_jsx(Box,{d:\"flex\",flexDir:\"column\",p:3,bg:\"#F8F8F8\",w:\"100%\",h:\"100%\",borderRadius:\"lg\",overflowY:\"hidden\",children:chats?/*#__PURE__*/_jsx(Stack,{overflowY:\"scroll\",children:chats.map(function(chat){return/*#__PURE__*/_jsxs(Box,{onClick:function onClick(){return setSelectedChat(chat);},cursor:\"pointer\",bg:selectedChat===chat?\"#38B2AC\":\"#E8E8E8\",color:selectedChat===chat?\"white\":\"black\",px:3,py:2,borderRadius:\"lg\",children:[/*#__PURE__*/_jsx(Text,{children:!chat.isGroupChat?getSender(loggedUser,chat.users):chat.chatName}),chat.latestMessage&&/*#__PURE__*/_jsxs(Text,{fontSize:\"xs\",children:[/*#__PURE__*/_jsxs(\"b\",{children:[chat.latestMessage.sender.name,\" : \"]}),chat.latestMessage.content.length>50?chat.latestMessage.content.substring(0,51)+\"...\":chat.latestMessage.content]})]},chat._id);})}):/*#__PURE__*/_jsx(ChatLoading,{})})]});};export default MyChats;","map":{"version":3,"sources":["/Users/akshataggarwal/Desktop/mern-chat-app/frontend/src/components/MyChats.js"],"names":["AddIcon","Box","Stack","Text","useToast","axios","useEffect","useState","getSender","ChatLoading","GroupChatModal","Button","ChatState","MyChats","fetchAgain","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","toast","fetchChats","config","headers","Authorization","token","get","data","title","description","status","duration","isClosable","position","JSON","parse","localStorage","getItem","base","md","lg","map","chat","isGroupChat","users","chatName","latestMessage","sender","name","content","length","substring","_id"],"mappings":"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","sourcesContent":["import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n"]},"metadata":{},"sourceType":"module"}